
/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123
 */


const express  =  require('express');
const port  = 5000;
const app =  express();
const fs = require('fs');
// const path = require('path');
const cors = require('cors');
app.use(cors());
app.use(express.json());
// 1.GET /todos - Retrieve all todo items
// Description: Returns a list of all todo items.
// Response: 200 OK with an array of todo items in JSON format.
// Example: GET http://localhost:3000/todos

app.get('/todos',(req,res)=>{
    fs.readFile('dataBase.json','utf8', (err,data)=>{
    if(err) throw err;
    else{
      res.json(JSON.parse(data));
    }
  })
})



// 3. POST /todos - Create a new todo item
// Description: Creates a new todo item.
// Request Body: JSON object representing the todo item.
// Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
// Example: POST http://localhost:3000/todos
// Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
app.post('/todos',(req,res) => {
       const obj = {
        id: Math.floor(Math.random()*1000000),
        title: req.body.title,
        description: req.body.description
       }
     
       fs.readFile('dataBase.json','utf8', (err,data)=>{
        if(err) throw err;
        else{
        let newArray = JSON.parse(data);
        newArray.push(obj);

        fs.writeFile('dataBase.json',JSON.stringify(newArray),()=>{});
        res.status(200).json('Task Added sucessfully');
        }
      })
    
})



// 4. PUT /todos/:id - Update an existing todo item by ID
// Description: Updates an existing todo item identified by its ID.
// Request Body: JSON object representing the updated todo item.
// Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
// Example: PUT http://localhost:3000/todos/123
// Request Body: { "title": "Buy groceries", "completed": true }

app.put('/todos/:id',(req,res)=>{

    // console.log(req.params.id);
    // console.log(req.body);
    const  id =  parseInt(req.body.id);

    fs.readFile('dataBase.json','utf8',(err,data)=>{
    let  array = JSON.parse(data);
       const check =  serachIndex(array,id);
  
   
       if(check === -1) res.status(404).json('task not found');
       else{
        array[check].title  = req.body.title;
        array[check].description  = req.body.description;
           fs.writeFile('dataBase.json',JSON.stringify(array), ()=>{
            res.json('edited sucessfully');
           });
       }
    })
})


// 5. DELETE /todos/:id - Delete a todo item by ID
// Description: Deletes a todo item identified by its ID.
// Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
// Example: DELETE http://localhost:3000/todos/123

function serachIndex(arr,id){
    for(let  i = 0; i<arr.length; i++){
        if(arr[i].id === id) return i;
    }

    return -1;
}

app.delete('/todos/:id',(req,res)=>{
    const  id =  parseInt(req.body.id);
 fs.readFile('dataBase.json','utf8',(err,data)=>{
    const  array = JSON.parse(data);
    const check =  serachIndex(array,id);


    if(check === -1) res.status(404).json('task not found');
    else{
        array.splice(check,1);
        fs.writeFile('dataBase.json',JSON.stringify(array), ()=>{});
        res.json('deleted sucessfully');
    }
 })

})

// 1st way to solve CORS  error
// app.get('/',(req,res)=>{
//   res.sendFile(path.join(__dirname,'index.html'));
// })

app.listen(port,()=>{
    console.log('start ho gyame');
})